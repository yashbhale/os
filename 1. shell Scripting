//1.	Print Sum of Digits of a given number using command line argument
#!/bin/bash

number=$1
sum=0

for (( i=0; i<${#number}; i++ )); do
    digit=${number:$i:1}
    sum=$((sum + digit))
done

echo "Sum of digits: $sum"


//  2.	Write a shell script using function for following:1)average of given numbers 2) Max  digit from given number and 3) min digit  from given number
#!/bin/bash


average() {
    sum=0
    count=$#

    for num in "$@"; do
        sum=$((sum + num))
    done

    avg=$(echo "scale=2; $sum / $count" | bc)
    echo "Average: $avg"
}


max_digit() {
    number=$1
    max=0

    for (( i=0; i<${#number}; i++ )); do
        digit=${number:$i:1}
        if [ $digit -gt $max ]; then
            max=$digit
        fi
    done

    echo "Max digit: $max"
}
min_digit() {
    number=$1
    min=9

    for (( i=0; i<${#number}; i++ )); do
        digit=${number:$i:1}
        if [ $digit -lt $min ]; then
            min=$digit
        fi
    done

    echo "Min digit: $min"
}
case $1 in
    average)
        shift
        average "$@"
        ;;
    maxdigit)
        shift
        max_digit "$1"
        ;;
    mindigit)
        shift
        min_digit "$1"
        ;;
    *)
        echo "Usage:"
        echo "$0 average num1 num2 num3 ..."
        echo "$0 maxdigit number"
        echo "$0 mindigit number"
        ;;
Esac


//  3.	Perform sorting on given array elements
#!/bin/bash

bubble_sort() {
    local array=("$@")
    local n=${#array[@]}
    local temp

    for ((i = 0; i < n; i++)); do
        for ((j = 0; j < n-i-1; j++)); do
            if [ "${array[j]}" -gt "${array[j+1]}" ]; then
                # Swap
                temp=${array[j]}
                array[j]=${array[j+1]}
                array[j+1]=$temp
            fi
        done
    done

    echo "Sorted array: ${array[@]}"
}

# Main script
echo "Enter the elements of the array separated by spaces:"
read -a array

bubble_sort "${array[@]}"



//  4.	Program to find factorial of a given number with and without recursion
#!/bin/bash
factorial_non_recursive() {
    local number=$1
    local result=1

    for (( i=1; i<=number; i++ )); do
        result=$((result * i))
    done

    echo "$result"
}


factorial_recursive() {
    local number=$1
    if [ "$number" -le 1 ]; then
        echo 1
    else
        local prev=$(factorial_recursive $((number - 1)))
        echo $((number * prev))
    fi
}

number=$1
echo "Factorial (non-recursive) of $number is $(factorial_non_recursive $number)"
echo "Factorial (recursive) of $number is $(factorial_recursive $number)"	


//  5. Program to check file type and permission for a given file
#!/bin/bash

# Function to check file type
check_file_type() {
    file_type=$(file -b "$1")
    echo "File type: $file_type"
}

# Function to check file permissions
check_file_permissions() {
    file_permissions=$(ls -l "$1" | awk '{print $1}')
    echo "File permissions: $file_permissions"
}

# Main script
file=$1

# Check file type and permissions
check_file_type "$file"
check_file_permissions "$file"



//  6.	Palindrome
#!/bin/bash

# Function to check if a string is a palindrome
check_palindrome() {
    local input="$1"
    local reversed_input=$(echo "$input" | rev)

    if [ "$input" == "$reversed_input" ]; then
        echo "The string '$input' is a palindrome."
    else
        echo "The string '$input' is not a palindrome."
    fi
}

# Main script
echo "Enter a string:"
read input_string

check_palindrome "$input_string"



